#------------------------------------------------------------------------------
#  Copyright (c) 2011, Enthought, Inc.
#  All rights reserved.
#------------------------------------------------------------------------------
""" ProgressBar driven by Timer

In this example, we demonstrate connecting a ProgressBar up to a model 
that is modified by a Timer.

"""

:: python ::

import random

from traits.api import Any, Bool, HasTraits, Int


class Model(HasTraits):
    """ Model a process that does some work on command.

    """
    # The total units of work to do.
    work_units = Int(1000)

    # The number of units done.
    units_done = Int(0)

    # A toolkit supplied timer function
    timer_func = Any

    # Whether or not the timer has started
    timer_started = Bool(False)

    def start_work(self):
        """ Start the Timer to do work.

        """
        if not self.timer_started:
            self.timer_started = True
            self.timer_func(1.0, self.do_work)

    def do_work(self):
        """ Do a random amount of work.
        
        """
        self.units_done += 1
        if self.units_done >= self.work_units:
            self.timer_started = False
        else:
            self.timer_func(1.0, self.do_work)

    def reset(self):
        """ Reset the work done back to 0.
        
        """
        self.units_done = 0

:: end ::


defn ModelView(model):
    Window:
        title = 'Progress Bar'
        constraints = [
            vbox(progress,
                hbox(_space_, label, _space_), 
                hbox(_space_, work_button, _space_),
                _space_),
            align('h_center', progress, label, work_button),
            width >= 200,
        ]
        ProgressBar:
            id: progress
            value := model.units_done
            maximum := model.work_units
        Label:
            id: label
            text << '{0}% ({1}/{2})'.format(progress.percentage, progress.value, progress.maximum)
        PushButton:
            id: work_button
            text << "Start" if progress.value == 0 else "Reset"
            clicked >> model.start_work() if progress.value == 0 else model.reset()

:: python ::

# The main function is special cased as the entry point by the enaml-run script
def main():
    model = Model()
    window, = ModelView(model)
    model.timer_func = window.toolkit.invoke_timer
    window.show()

:: end ::

